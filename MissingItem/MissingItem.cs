using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace MissingItem
{
    class MissingItem
    {
        string _ServerDb;
        string _ItemInfo;
        string _Outfile;

        public MissingItem(string db, string iteminfo, string outfile)
        {
            _ServerDb = db;
            _ItemInfo = iteminfo;
            _Outfile = outfile;
        }

        public void GenerateOutput()
        {
            try
            {
                Log("Parsing item database");
                var dblist = ParseItemDb(_ServerDb);
                Log("Parsing client ItemInfo");
                var lualist = ParseItemInfo(_ItemInfo);
                Log("Processing output");
                var sb = new StringBuilder();
                sb.Append("// Generated by Secretdataz's MissingItem on ").Append(DateTime.Now.ToString("g", new CultureInfo("en-US"))).Append(Environment.NewLine);
                sb.Append("// Athena Item Db: ").Append(Path.GetFileName(_ServerDb)).Append(Environment.NewLine);
                sb.Append("// ItemInfo: ").Append(Path.GetFileName(_ItemInfo)).Append(Environment.NewLine);
                var missing = FindMissing<int>(dblist, lualist);
                foreach (var entry in missing)
                {
                    sb.Append(entry.ToString() + Environment.NewLine);
#if DEBUG
                Log("DB doesn't contain item id " + entry.ToString());
#endif
                }
                Log("Writing output file");
                File.WriteAllText(_Outfile, sb.ToString());
                Log("Done.");
            }catch(FileNotFoundException e)
            {
                Error("File not found. " + e.FileName);
            }catch(Exception e)
            {
                Error(e + e.Message);
            }
            Console.ReadKey();
        }

        private List<int> ParseItemDb(string file)
        {
            var list = new List<int>();
            var content = File.ReadAllLines(file);
            var pat = @"(\d+),";
            foreach (var line in content)
            {
                if (line.StartsWith("//")) continue;
                var match = new Regex(pat).Match(line);
                if (match.Success) list.Add(int.Parse(match.Groups[1].Value));
            }
            return list;
        }

        private List<int> ParseItemInfo(string file)
        {
            var list = new List<int>();
            var content = File.ReadAllLines(file);
            var pat = @"\[(\d*)\]";
            foreach (var line in content)
            {
                if (line.StartsWith("--") || !line.EndsWith("{")) continue; // Filter definitely non-ID lines to increase speed.
                var match = new Regex(pat).Match(line);
                if (match.Success)
                {
                    var id = int.Parse(match.Groups[1].Value);
                    if (id > 500 && id < 99999) list.Add(id);
                }
            }
            return list;
        }

        //Find missing items in A from B [secretdataz]
        private List<T> FindMissing<T>(List<T> A, List<T> B)
        {
            List<T> missing = new List<T>();
            foreach(var v in B)
            {
                if (!A.Contains(v))
                {
                    missing.Add(v);
                }
            }
            return missing;
        }

        static void Log(string arg) { Console.WriteLine("[*] " + arg); }
        static void Error(string arg) { Console.WriteLine("[!!] " + arg); }
    }
}
